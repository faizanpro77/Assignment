name :--shaikh md faizan md zainulhaque
mb no:-7775962642
email:-faizyshaikh204@gmail.com

......................................................................................

Repetition Practice Problems with for loop

1)Write a program that takes a command-line argument n and prints a table of the
powers of 2 that are less than or equal to 2^n.(forpower.sh)

sol:-
#! /bin/bash
read -p "enter a number" exponential
for ((count=1; count<exponential; count++ ))
do
        power=$((2**count))
echo "2^"$count"="$power
done

output:--
2^1=2
2^2=4
2^3=8
2^4=16


2)Write a program that takes a command-line argument n and prints the nth harmonic
number. Harmonic Number is of the form (*harmonic*)

sol:--
#! /bin/bash
read -p "enter a number" number
for (( count=1; count<=number; count++ ))
do
        
        printf 1/$count
        printf ""+""
done

output:--
enter a number5
1/1+1/2+1/3+1/4+1/5+

3)Write a program that takes a input and determines if the number is a prime.

#! /bin/bash
read -p "Enter a number" num
for (( count=2;count<num;count++ ))
do
        if [ $((num%count)) -eq 0 ]
        then
                break
        fi
done
if [ $num -eq $count ]
then
echo "prime number"
else
echo "number is not prime"
fi

output:--
Enter a number4
number is not prime

Enter a number5
prime number


4)Extend the program to take a range of number as input and output the Prime
Numbers in that range.
sol:--

#! /bin/bash
read -p "enter a number" lower_limit
read -p "enter a number" upper_limit
for (( counter=lower_limit; counter<=upper_limit; counter++ ))
do

for (( count=2;count<=counter;count++ ))
do
        if [ $((counter%count)) -eq 0 ]
        then
                break
        fi
done
if [ $counter -eq $count ]
then
echo "prime number  " $counter
fi

done

output:--

enter a number2
enter a number8
prime number   2
prime number   3
prime number   5
prime number   7



5)Write a program that computes a factorial of a number taken as input.
 5 Factorial – 5! = 1 * 2 * 3 * 4 * 5
*factorial*

soltion:--
   #! /bin/bash/
factorial=1
read -p "enter a number " number
for ((count=1;count<=number;count++))
do
        factorial=$((factorial*count))
done
echo "factorial is " $factorial

output:--
enter a number 3
factorial is  6


6)Write a program to compute Factors of a number N using prime factorization method.

Logic -> Traverse till i*i <= N instead of i <= N for efficiency.
O/P -> Print the prime factors of number N.(*primefactorization*)


sol:--

#! /bin/bash
read -p "enter a number" number
for(( count=2; number>1; count++))
do

        while [ $((number%count)) -eq 0 ]
        do
        echo $count
        number=$((number/count))
        done
done

output:--
enter a number12
2
2
3


.........................................................................................
practice problem of while loop

1)Write a program that takes a command-line argument n and prints a
table of the powers of 2 that are less than or equal to 2^n till 256 is
reached...
*whilepower.sh*
sol:--

#! /bin/bash
read -p "enter a number" exponential
count=0
limit=256
while [ $count -lt $exponential -a $((2**count)) -le $limit ]
do
        power=$((2**count))
echo "2^"$count"="$power
 count=$((count+1))

done



output:--
enter a number40
2^0=1
2^1=2
2^2=4
2^3=8
2^4=16
2^5=32
2^6=64
2^7=128
2^8=256

2)Extend the Flip Coin problem till either Heads or Tails wins 11 times.
(*coinflipwin.sh*)

sol:--
#! /bin/bash
count=0
while [ $count -lt 11 ]
do
coinflip=$(( RANDOM%2 ))
if [ $coinflip -eq 0 ]
        then
        echo "heads"
        count1=$((count1+1))
        else
        echo "tails"
        count2=$((count2+1))
        fi
count=$(( count+1 ))
done
echo "number of heads " $count1
echo "number of tails " $count2
echo "total count " $count



output:--

heads
heads
heads
heads
tails
heads
tails
heads
heads
heads
tails
number of heads  8
number of tails  3
total count  11


3)Write a Program where a gambler starts with Rs 100 and places Re 1 bet
until he/she goes broke i.e. no more money to gamble or reaches the
goal of Rs 200. Keeps track of number of times won and number of bets
made.
(*bet.sh*)
sol:--
  
#! /bin/bash
amount=100
limit=200
count=0
bets=0
while [ $amount -gt 0 -a $amount -lt $limit ]
do
        gambler=$(( RANDOM%2 ))
        if [ $gambler -eq 0 ]
        then
                echo "heads"
                amount=$((amount+1))
                echo "amount is" $amount
                count=$((count+1))
                echo "number of time winning bets"
                echo $count
        else
                echo "tails"
                amount=$((amount-1))
                echo "amount is" $amount
                count=$((count+1))
                echo "number of time losing bets"
                echo $count
        fi


bets=$((bets+1))
echo "total number of bets" $bets
done

output:--

heads
amount is 198
number of time winning bets
6046
total number of bets 6046
heads
amount is 199
number of time winning bets
6047
total number of bets 6047
heads
amount is 200
number of time winning bets
6048
total number of bets 6048




........................................................................

Functions Practice Problems

1)Help user find degF or degC based on their Conversion Selection. Use
Case Statement and ensure that the inputs are within the Freezing Point (
0 °C / 32 °F ) and the Boiling Point of Water ( 100 °C / 212 °F )
a. degF = (degC * 9/5) + 32
b. degC = (degF – 32) * 5/9

(*deg.sh*)
soln:--
#! /bin/bash
function tempratureF()
{
degC=$1
        degF=$(((degC*9/5)+32))
        echo $degF
}

function tempratureC()
{
degF=$1

        degC=$(( (degF-32)*5/9 ))
        echo $degC
}

read -p "enter a  temprature in celcius " temprature1
read -p "enter a temprature in fared " temprature2
read -p "enter a choice 1. fared 2.celcius " choice
case $choice in
        1)
        if [ $temprature1 -gt 0 -a $temprature1 -lt 100 ]
        then
        tempfared=$(tempratureF $temprature1)
        echo "temprature in fared=" $tempfared "F"
        else
        echo "invalid number"
        fi
        ;;
        2)
        if [ $temprature2 -gt 32 -a $temprature2 -lt 212 ]
        then
        tempcel=$(tempratureC $temprature2)
        echo "temprature in celcius=" $tempcel "C"
        else
        echo "invalid number"
        fi
        ;;
	 *)
        echo "invalid choice"
        ;;
esac


output:--
enter a  temprature in celcius 10
enter a temprature in fared 80
enter a choice 1. fared 2.celcius 2
temprature in celcius= 26 C

enter a  temprature in celcius 20
enter a temprature in fared 45
enter a choice 1. fared 2.celcius 1
temprature in fared= 68 F


2)Write a function to check if the two numbers are Palindromes
(palindrom.sh)
sol:--
#! /bin/bash
function palindrom()
{
number1=$1
number2=$2
container=0
reverse=0

while [ $number1 -ne 0 ]
do
container=$((number1%10))
reverse=$((reverse*10+container))
number1=$((number1/10))
done

if [ $((reverse)) -eq $2 ]
then
echo "number is palindrom "
else
echo "number is not palindrom"
fi
}
read -p "enter a number" number1
read -p "enter a number" number2
check=$(palindrom $number1 $number2)
echo $check

output:--
enter a number123
enter a number589
number is not palindrom

enter a number121
enter a number121
number is palindrom


3)Take a number from user and check if the number is a Prime then show

that its palindrome is also prime
a. Write function check if number is Prime
b. Write function to get the Palindrome.
c. Check if the Palindrome number is also prime
(*primepalindrom.sh*)
slon:--
#! /bin/bash/
function prime()
{
num=$1
for (( count=2;count<num;count++ ))
do
        if [ $((num%count)) -eq 0 ]
        then
                break
        fi
done
if [ $num -eq $count ]
then
echo "prime number"
else
echo "number is not prime"
fi

}


function palindrom()
{
num=$1
remainder=0
reverse=0

while [ $num -ne 0 ]
do
remainder=$((num%10))
reverse=$((reverse*10+remainder))
num=$((num/10))
done

if [ $((reverse)) -eq $1 ]
then
echo "number is palindrom and  "
num1=$reverse
else
echo "number is not palindrom and "
fi

for (( count=2; count<reverse; count++ ))
do
        if [ $((reverse%count)) -eq 0 ]
        then
                break
        fi
done
if [ $reverse -eq $count ]
then
        echo"prime number"
else
        echo "not a prime number"
fi
}

read -p "Enter a number to check prime " num
prime=$(prime $num)
echo $prime
palindrom=$(palindrom $num)
echo $palindrom

output:---

Enter a number to check prime 121
number is not prime
number is palindrom and not a prime number


